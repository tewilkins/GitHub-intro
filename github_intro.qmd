---
title: "Secure workflow with R and GitHub"
author: "Burnley R Club meeting 19/4/2024"
format: 
  revealjs:
    theme: solarized
    mermaid:
      theme: forest
editor: visual
---

## This session {.smaller}

::: columns
::: {.column width="45%"}
</br>

-   Introduction to git and data management

-   Incorporate git into your R workflow

-   Setting up GitHub with RStudio

    -   [happygitwithr.com](https://happygitwithr.com/)
:::

::: {.column width="55%"}
![](https://i.ibb.co/wzgcj3X/qr-code-gitr.png){fig-align="center" width="270"}
:::
:::

::: {layout="[[1], [70,30]]"}
![](https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png){width="569"}![](https://1000logos.net/wp-content/uploads/2021/05/GitHub-logo.png){fig-align="center" width="373"}
:::

## What are git and GitHub? {.smaller}

</br>

-   Git (Global Information Tracker) is a system for managing version control and collaborations

    -   Stores a copy of every committed\* version

    -   Tracks **who** did **what** and **when**

    -   Integrated R workflow

</br>

::: fragment
-   GitHub is a web application for managing git

    -   Point-and-click interface

    -   Cloud-based file storage
:::

## Why do I need any of that?

</br>

::: columns
::: {.column width="60%"}
-   *Version control*

::: incremental
-   Collaboration

-   Documentation

-   Reproducibility

-   *Data Loss Prevention*
:::
:::

::: {.column width="40%"}
![](https://imgs.xkcd.com/comics/documents.png)
:::
:::

##  {style="background-color: darkblue;"}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b3/Windows_XP_Blue_Screen_of_Death_%28Forced%29.svg/1280px-Windows_XP_Blue_Screen_of_Death_%28Forced%29.svg.png){.absolute top="0" width="1050"}

## Data loss prevention {.smaller}

</br>

::: {style="color: red"}
Bad practices:
:::

::: fragment
-   Important files on local storage (Hard disk, USB flash drives)
-   Breaking file paths (Moving files around)
-   Duplicate files
:::

</br>

::: {style="color: green"}
Good practices:
:::

::: fragment
-   Keep files away from your computer!
-   Develop a model for clean workflow across platforms
-   Make your code **portable** and **future-proof**
:::

##  {.smaller}

![](https://i.ibb.co/kMtJ6cG/codearticle.png){fig-align="center"}

##  {.smaller}

::: columns
::: {.column width="33%"}
![](https://i.ibb.co/hsqz2sb/github-logo-7880-D80-B8-D-seeklogo-com.png){fig-align="center" width="200" height="200"}

**GitHub.com**

::: fragment
-   Version control for R code
-   Quarto/Rmarkdown documents
:::
:::

::: {.column width="33%"}
![](https://i.ibb.co/stnbfJT/2758630.png){fig-align="center" width="200"}

**Relational databases**

::: fragment
-   Large datasets
-   Spatial imaging data
:::
:::

::: {.column width="33%"}
![](https://i.ibb.co/QfGCnw3/2840068.png){fig-align="center" width="200"}

**Organisational share drive**

::: fragment
-   Read and write working files
-   Raw or draft data files
:::
:::
:::

::: fragment
::: columns
::: {.column width="30%"}
![](https://i.ibb.co/dLdfd0Y/key-arrow-right-icon-136476.png){fig-align="right" width="150"}
:::

::: {.column width="70%"}
![](https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png){fig-align="left" width="400"}
:::
:::
:::

## GitHub workflow for single-user {.smaller}

</br>

::: columns
::: {.column width="40%"}
Key terms:

::: {.fragment .highlight-current-red}
-   **Repository** (a.k.a repo)
:::

::: {.fragment .highlight-current-red}
-   **Clone** files on local drive
-   **Pull** most recent version
:::

::: {.fragment .highlight-current-red}
-   **Commit** changes to local repo
:::

::: {.fragment .highlight-current-red}
-   **Push** to repo
:::

::: {.fragment .fade-in}
-   3 steps: **Pull, Commit, Push!**
:::
:::

::: {.column width="60%"}
```{mermaid}
%%| fig-responsive: false
%%| fig-height: 5
%%| fig-width: 6
  flowchart TB
    A[(GitHub\nrepo)] -->|Pull| B(Local computer 1\ne.g., laptop)
    linkStyle 0 color:red;
    B ==> |Push| A
    linkStyle 1 color:red;
    B <--> |Commit to\nlocal repo| D{local repo}
    linkStyle 2 color:red;
    A -.-> |Clone| C(Local computer 2\ne.g., virtual server)
    linkStyle 3 color:red;
```
:::
:::

## GitHub workflow with version control {.smaller}

```{mermaid}
%%| fig-responsive: false
%%| fig-height: 2
%%| fig-width: 10

  graph LR
      X((V1.1)) --> Z((V1.2))
      linkStyle 0 color:red;
      Z --> A((V1.3))
      linkStyle 1 color:red;
      A --> |Commit| B((Local Current))
      linkStyle 2 color:red;
      style B fill:white
      B --> |Push| M((Master V1.3))
      linkStyle 3 color:red;

```

</br>

::: columns
::: {.column width="40%"}
-   Can go back to all previous versions, provided that the local and master repos are up-to-date

</br>

::: fragment
-   Each committed version requires a message
:::
:::

::: {.column width="10%"}
:::

::: {.column width="50%"}
::: fragment
![](https://imgs.xkcd.com/comics/git_commit.png)
:::
:::
:::

## What should I be pushing to GitHub?

</br>

-   Generally, lightweight text and script files

    -   R scripts
    -   Rmarkdown and Quarto

</br>

-   Documentation

    -   Readme files

    -   Metadata

## What should I NOT be pushing to GitHub?

-   Large files (\>100MB - shouldn't be anywhere near that!)

-   Raw or unpublished data

-   Media files (e.g., audio, images, video, etc)

::: fragment
-   Microsoft documents\*

    -   Embedded images and graphs increase file size

    -   Contain lots of unecessary formatting elements
:::

## Other things before moving on... {.smaller}

</br>

You shouldn't break a commitment!

-   Once something is committed, it's difficult to take it back again

-   Once something is pushed, it's impossible to un-push it

</br>

Work on one local repo at a time

-   Not disasterous, but can be a headache to merge changes across local repos

-   If working with others, make sure to communicate carefully

## Gitting set up {.smaller}

Initial setup is a bit harrowing... and it involves a few tedious steps.
And it's different for Mac, Windows and Linux.
Bear with me!

All instructions come from [happygitwithr.com:](https://happygitwithr.com/)

::: columns
::: {.column width="50%"}
</br>

-   Set up a [Github.com](https://github.com/) account

-   Create a Personal Access Token (PAT)

-   Test the connection between GitHub and your computer

-   Clone repo to a local file

-   Test initial commit, push and pull
:::

::: {.column width="50%"}
![https://happygitwithr.com/](https://i.ibb.co/wzgcj3X/qr-code-gitr.png){fig-align="center" width="400"}
:::
:::

## 

## Other resources

::: columns
::: {.column width="50%"}
:::

::: {.column width="50%"}
:::
:::
