---
title: "Secure workflow with R and GitHub"
author: "Burnley R Club meeting 19/4/2024"
format: 
  revealjs:
    theme: solarized
    mermaid:
      theme: forest
editor: visual
---

## This session {.smaller}

::: columns
::: {.column width="45%"}
</br>

-   Introduction to git and data management

-   Incorporate git into your R workflow

-   Setting up GitHub with RStudio

    -   [happygitwithr.com](https://happygitwithr.com/)

    -   Hello
:::

::: {.column width="55%"}
![](https://i.ibb.co/wzgcj3X/qr-code-gitr.png){fig-align="center" width="270"}
:::
:::

::: {layout="[[1], [70,30]]"}
![](https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png){width="569"}![](https://1000logos.net/wp-content/uploads/2021/05/GitHub-logo.png){fig-align="center" width="373"}
:::

## What are git and GitHub? {.smaller}

</br>

-   Git (Global Information Tracker) is a system for managing version control and collaborations

    -   Stores a copy of every committed\* version

    -   Tracks **who** did **what** and **when**

    -   Integrated R workflow

</br>

::: fragment
-   GitHub is a web application for managing git

    -   Point-and-click interface

    -   Cloud-based file storage
:::

## Why do I need any of that?

</br>

::: columns
::: {.column width="60%"}
-   *Version control*

::: incremental
-   Collaboration

-   Documentation

-   Reproducibility

-   *Data Loss Prevention*
:::
:::

::: {.column width="40%"}
![](https://imgs.xkcd.com/comics/documents.png)
:::
:::

##  {style="background-color: darkblue;"}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b3/Windows_XP_Blue_Screen_of_Death_%28Forced%29.svg/1280px-Windows_XP_Blue_Screen_of_Death_%28Forced%29.svg.png){.absolute top="0" width="1050"}

## Data loss prevention {.smaller}

</br>

::: {style="color: red"}
Bad practices:
:::

::: fragment
-   Important files on local storage (Hard disk, USB flash drives)
-   Breaking file paths (Moving files around)
-   Duplicate files
:::

</br>

::: {style="color: green"}
Good practices:
:::

::: fragment
-   Keep files away from your computer!
-   Develop a model for clean workflow across platforms
-   Make your code **portable** and **future-proof**
:::

##  {.smaller}

![](https://i.ibb.co/kMtJ6cG/codearticle.png){fig-align="center"}

##  {.smaller}

::: columns
::: {.column width="33%"}
![](https://i.ibb.co/hsqz2sb/github-logo-7880-D80-B8-D-seeklogo-com.png){fig-align="center" width="200" height="200"}

**GitHub.com**

::: fragment
-   Version control for R code
-   Quarto/Rmarkdown documents
:::
:::

::: {.column width="33%"}
![](https://i.ibb.co/stnbfJT/2758630.png){fig-align="center" width="200"}

**Relational databases**

::: fragment
-   Large datasets
-   Spatial imaging data
:::
:::

::: {.column width="33%"}
![](https://i.ibb.co/QfGCnw3/2840068.png){fig-align="center" width="200"}

**Organisational share drive**

::: fragment
-   Read and write working files
-   Raw or draft data files
:::
:::
:::

::: fragment
::: columns
::: {.column width="30%"}
![](https://i.ibb.co/dLdfd0Y/key-arrow-right-icon-136476.png){fig-align="right" width="150"}
:::

::: {.column width="70%"}
![](https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png){fig-align="left" width="400"}
:::
:::
:::

## GitHub workflow for single-user {.smaller}

</br>

::: columns
::: {.column width="40%"}
Key terms:

::: {.fragment .highlight-current-red}
-   **Repository** (a.k.a repo)
:::

::: {.fragment .highlight-current-red}
-   **Clone** files on local drive
-   **Pull** most recent version
:::

::: {.fragment .highlight-current-red}
-   **Commit** changes to local repo
:::

::: {.fragment .highlight-current-red}
-   **Push** to repo
:::

::: {.fragment .fade-in}
-   3 steps: **Pull, Commit, Push!**
:::
:::

::: {.column width="60%"}
```{mermaid}
%%| fig-responsive: false
%%| fig-height: 5
%%| fig-width: 6
  flowchart TB
    A[(GitHub\nrepo)] -->|Pull| B(Local computer 1\ne.g., laptop)
    linkStyle 0 color:red;
    B ==> |Push| A
    linkStyle 1 color:red;
    B <--> |Commit to\nlocal repo| D{local repo}
    linkStyle 2 color:red;
    A -.-> |Clone| C(Local computer 2\ne.g., virtual server)
    linkStyle 3 color:red;
```
:::
:::

## GitHub workflow with version control {.smaller}

```{mermaid}
%%| fig-responsive: false
%%| fig-height: 2
%%| fig-width: 10

  graph LR
      X((V1.1)) --> Z((V1.2))
      linkStyle 0 color:red;
      Z --> A((V1.3))
      linkStyle 1 color:red;
      A --> |Commit| B((Local Current))
      linkStyle 2 color:red;
      style B fill:white
      B --> |Push| M((Master V1.3))
      linkStyle 3 color:red;

```

</br>

::: columns
::: {.column width="40%"}
-   Can go back to all previous versions, provided that the local and master repos are up-to-date

::: fragment
-   Each committed version requires a message
:::
:::

::: {.column width="10%"}
:::

::: {.column width="50%"}
::: fragment
![](https://imgs.xkcd.com/comics/git_commit.png)
:::
:::
:::

## What should I be pushing to GitHub?

</br>

No right or wrong, but...

::: fragment
-   Generally, lightweight text and script files

    -   R scripts
    -   Example datasets for testing
    -   Rmarkdown and Quarto files
:::

::: fragment
-   Documentation

    -   Readme files

    -   Metadata
:::

## What should I NOT be pushing to GitHub?

</br>

-   Large files (\>100MB - shouldn't be anywhere near that!)

-   Raw or unpublished data

-   Media files (e.g., audio, images, video, etc)

::: fragment
-   Microsoft documents\*

    -   Embedded images and graphs increase file size

    -   Contain lots of unecessary formatting elements
:::

## Other things before moving on... {.smaller}

</br>

You shouldn't break a commitment!

-   Once something is committed, it's difficult to take it back again

-   Once something is pushed, it's impossible to un-push it

</br>

Work on one local repo at a time

-   Not disasterous, but can be a headache to merge changes across local repos

-   If working with others, make sure to communicate carefully

## Gitting set up {.smaller}

Initial setup is a bit harrowing... and it involves a few tedious steps.
And it's different for Mac, Windows and Linux.
Bear with me!

All instructions come from [happygitwithr.com:](https://happygitwithr.com/)

::: columns
::: {.column width="50%"}
</br>

-   Set up a [Github.com](https://github.com/) account

-   [Install git (Windows)](https://gitforwindows.org/)

-   Create a **Personal Access Token (PAT)** or **SSH key**

-   Test the connection between GitHub and your computer

-   Clone repo to a local file

-   Test initial commit, push and pull
:::

::: {.column width="50%"}
![https://happygitwithr.com/](https://i.ibb.co/wzgcj3X/qr-code-gitr.png){fig-align="center" width="400"}
:::
:::

## Is git installed? {.smaller}

</br>

Open **Terminal** or **RStudio**, find terminal tab next to console and paste:

```{bash}
which git
## /usr/bin/git

git --version
## git version 2.32.1 (Apple Git-133)

git config --global core.editor "emacs"
```

</br>

If you get output like this, you can celebrate by moving on to the next step.

</br>

If git isn't installed on your computer, follow steps in [Chapter 6 - Install Git](https://happygitwithr.com/install-git).

Steps in [Chapter 7 - Introduce yourself to Git](https://happygitwithr.com/hello-git) can be done on the GitHub website:

-   Add additional user emails - very important!

-   Change initial branch - not important.

## Gitting acquainted with R {.smaller}

</br>

Next we need to open a channel for Git and R to communicate.
Password authentication support has been removed from GitHub in 2021.
It now requires authentication via credential setup:

::: fragment
-   [Personal Access Token (PAT) for HTTPS (Chapter 9)](https://happygitwithr.com/https-pat)

    -   Easy, quick, sensible - no Terminal needed!

    -   Not compatible with all Linux OS

    -   My advice - always set expiration to 'No Expiration'

    -   Keep a copy of your PAT - can be stored in RStudio
:::

::: fragment
-   [Public-private SSH key pair (Chapter 10)](https://happygitwithr.com/ssh-keys)

    -   Necessary for RCP servers
    -   Involves a lot of Terminal - be careful...

## 
:::

## PATs for RStudio {.smaller}

</br>

PATs can be crated and stored entirely within RStudio with the following commands:

```{r}
#| eval: false
#| echo: true
usethis::create_github_token()
```

</br>

This opens your browser and takes you to the GitHub.com site to create a new github token.

-   Keep your generated PAT somewhere temporarily!

-   Store it in RStudio:

```         
> gitcreds::gitcreds_set()

? Enter password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
-> Adding new credentials...
-> Removing credentials from cache...
-> Done.
```

## PATs for RStudio {.smaller}

</br>

Check that you've stored a credential with `gitcreds::gitcreds_get()`:

```         
> gitcreds_get()
#> <gitcreds>
#>   protocol: https
#>   host    : github.com
#>   username: PersonalAccessToken
#>   password: <-- hidden -->
```

## PATs for RStudio {.smaller}

</br>

If you need to change anything, use `gitcreds::gitcreds_set()`

```         
> gitcreds::gitcreds_set()

-> Your current credentials for 'https://github.com':

  protocol: https
  host    : github.com
  username: PersonalAccessToken
  password: <-- hidden -->

-> What would you like to do? 

1: Keep these credentials
2: Replace these credentials
3: See the password / token

Selection: 2

-> Removing current credentials...

? Enter new password or token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
-> Adding new credentials...
-> Removing credentials from cache...
-> Done.
```

## Git and R, sitting in a tree {.smaller}

</br>

If that's all working, we can get RStudio ready to clone a Git repo.

</br>

Some things before we start:

-   The repo should exist on GitHub before R can make a clone

-   All Git local repos should go in a folder called 'git' in the home directory

    -   e.g., `/Users/tewilkins/git`

-   All repos will be treated as separate R projects

-   Check you're using the most current version of RStudio and R

    -   Type `version` for R, see "About RStudio" for RStudio version

</br>

With these in mind, skip to [Chapter 12 - Connect RStudio to Git and GitHub](https://happygitwithr.com/rstudio-git-github)

## Git and R, sitting in a tree

</br>

Head to [GitHub.com](https://github.com/) to create a repo and follow steps for RStudio version control project.

![](https://1000logos.net/wp-content/uploads/2021/05/GitHub-logo.png){fig-align="center"}

## Other resources

::: columns
::: {.column width="50%"}
-   [GitHub student developer pack](https://education.github.com/pack)
-   [GitKraken](https://www.gitkraken.com/)
-   [DataCamp introduction to R](https://www.datacamp.com/courses/free-introduction-to-r)
-   People!
:::

::: {.column width="50%"}
:::
:::
