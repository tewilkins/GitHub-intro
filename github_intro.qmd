---
title: "Secure workflow with R and GitHub"
author: "Burnley R Club meeting 19/4/2024"
format: 
  revealjs:
    mermaid:
      theme: forest
editor: visual
---

## This session {.smaller}

::: columns
::: {.column width="45%"}
</br>

-   Introduction to Git and data management

-   Incorporate git into your R workflow

-   Gitting started with GitHub in R

    -   [happygitwithr.com](https://happygitwithr.com/)
:::

::: {.column width="55%"}
![](https://i.ibb.co/wzgcj3X/qr-code-gitr.png){fig-align="center" width="270"}
:::
:::

::: {layout="[[1], [70,30]]"}
![](https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png){width="569"}![](https://i.ibb.co/x13T9Bm/github-logo.png){fig-align="center" width="382"}
:::

## What are git and GitHub? {.smaller}

</br>

-   Git (Global Information Tracker) is a system for managing version control and collaborations

    -   Stores a copy of every committed\* version

    -   Tracks **who** did **what** and **when**

    -   Integrated R workflow

</br>

::: fragment
-   GitHub is a web application for managing git

    -   Point-and-click interface

    -   Cloud-based file storage
:::

## Why do I need any of that?

</br>

::: columns
::: {.column width="60%"}
-   *Version control*

::: incremental
-   Collaboration

-   Documentation

-   Reproducibility

-   *Data Loss Prevention*
:::
:::

::: {.column width="40%"}
![](https://imgs.xkcd.com/comics/documents.png)
:::
:::

##  {style="background-color: darkblue;"}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b3/Windows_XP_Blue_Screen_of_Death_%28Forced%29.svg/1280px-Windows_XP_Blue_Screen_of_Death_%28Forced%29.svg.png){.absolute top="0" width="1050"}

## Data loss prevention {.smaller}

</br>

::: {style="color: red"}
Bad practices:
:::

::: incremental
-   Important files on local storage (Hard disk, USB flash drives)
-   Breaking file paths (Moving files around)
-   Duplicate files
:::

</br>

::: {style="color: green"}
Good practices:
:::

::: incremental
-   Keep files away from your computer!
-   Develop a model for clean workflow
-   Make your work portable
:::

##  {.smaller}

::: columns
::: {.column width="33%"}
![](https://i.ibb.co/hsqz2sb/github-logo-7880-D80-B8-D-seeklogo-com.png){fig-align="center" width="250" height="250"}

**GitHub.com**

::: incremental
-   Version control for R code
-   Quarto/Rmarkdown documents
:::
:::

::: {.column width="33%"}
![](https://i.ibb.co/fpX20YN/7def1485a80115c48e19b450e6a39e4a.jpg){fig-align="center" width="250"}

**Relational databases**

::: incremental
-   Large datasets
-   Spatial imaging data
:::
:::

::: {.column width="33%"}
![](https://i.ibb.co/QfGCnw3/2840068.png){fig-align="center" width="250"}

**Organisational share drive**

::: incremental
-   Read and write working files
-   MS documents
:::
:::
:::

::: incremental
![](https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png){width="400" fig-align="center"}
:::

## GitHub workflow for single-user {.smaller}

</br>

::: columns
::: {.column width="40%"}
Key terms:

::: {.fragment .highlight-current-red}
-   **Repository** (a.k.a repo)
:::

::: {.fragment .highlight-current-red}
-   **Clone** files on local drive
-   **Pull** most recent version
:::

::: {.fragment .highlight-current-red}
-   **Commit** changes to local repo
:::

::: {.fragment .highlight-current-red}
-   **Push** to repo
:::

::: {.fragment .fade-in}
-   3 steps: **Pull, Commit, Push!**
:::
:::

::: {.column width="60%"}
```{mermaid}
%%| fig-responsive: false
%%| fig-height: 5
%%| fig-width: 6
  flowchart TB
    A[(GitHub\nrepo)] -->|Pull| B(Local computer 1\ne.g., laptop)
    linkStyle 0 color:red;
    B ==> |Push| A
    linkStyle 1 color:red;
    B <--> |Commit to\nlocal repo| D{local repo}
    linkStyle 2 color:red;
    A -.-> |Clone| C(Local computer 2\ne.g., virtual server)
    linkStyle 3 color:red;
```
:::
:::

## GitHub workflow with version control

```{mermaid}
%%| fig-responsive: false
%%| fig-height: 3
%%| fig-width: 10

  graph LR
      X((V1.1)) --> Z((V1.2))
      linkStyle 0 color:red;
      Z --> A((V1.3))
      linkStyle 1 color:red;
      A --> |Commit| B((Local Current))
      linkStyle 2 color:red;
      style B fill:white
      B --> |Push| M((Master V1.3))
      linkStyle 3 color:red;

```

Can go back to previous versions, provided that the local repo and master repo are up-to-date.

## What should I be pushing to GitHub?

</br>

-   Generally, lightweight text and script files

    -   R scripts
    -   Rmarkdown and Quarto

</br>

-   Documentation

    -   Readme files

    -   Metadata

## What should I NOT be pushing to GitHub?

-   Large files (\>100MB - shouldn't be anywhere near that!)

-   Raw or unpublished data

-   Media files (e.g., audio, images, video, etc)

::: fragment
-   Microsoft documents\*

    -   Embedded images and graphs increase file size

    -   Contain lots of unecessary formatting elements
:::

## Other things before moving on... {.smaller}

</br>

You shouldn't break a commitment!

-   Once something is committed, it's difficult to take it back again

-   Once something is pushed, it's impossible to un-push it

</br>

Work on one local repo at a time

-   Not disasterous, but can be a headache to merge changes across local repos

-   If working with others, make sure to communicate carefully

## Gitting set up!

Initial setup is a bit harrowing... and it involves a few tedious steps.
Bear with me!

-   Setting up a Github.com account

-   Creating a Personal Access Token (PAT)
